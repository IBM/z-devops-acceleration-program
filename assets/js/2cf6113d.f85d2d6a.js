"use strict";(self.webpackChunkdap_docs=self.webpackChunkdap_docs||[]).push([[4148],{7588:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var n=o(7624),i=o(2172);const a={},s="Artifact repository",r={id:"artifact-repository",title:"Artifact repository",description:"Once building occurs, the pipeline then publishes and stores the build outputs as a package in the artifact repository. This package contains any artifact that will need to be deployed, such as load modules, DBRMs, DDL, and the configuration files for the subsystems. Importantly, the package also contains the build artifacts' metadata and other necessary pieces of information that enable any changes to be traced back to the version control system. Depending on the system, the package can be a WAR, EAR files, a Windows installer package, among others. The artifact repository can also be used as the publishing platform to store intermediate files needed in the build phase.",source:"@site/docs/artifact-repository.md",sourceDirName:".",slug:"/artifact-repository",permalink:"/z-devops-acceleration-program/docs/artifact-repository",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Build",permalink:"/z-devops-acceleration-program/docs/build"},next:{title:"Deployment manager",permalink:"/z-devops-acceleration-program/docs/deployment-manager"}},c={},l=[{value:"Common artifact repository options",id:"common-artifact-repository-options",level:2},{value:"Resources",id:"resources",level:2}];function p(e){const t={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"artifact-repository",children:"Artifact repository"}),"\n",(0,n.jsx)(t.p,{children:"Once building occurs, the pipeline then publishes and stores the build outputs as a package in the artifact repository. This package contains any artifact that will need to be deployed, such as load modules, DBRMs, DDL, and the configuration files for the subsystems. Importantly, the package also contains the build artifacts' metadata and other necessary pieces of information that enable any changes to be traced back to the version control system. Depending on the system, the package can be a WAR, EAR files, a Windows installer package, among others. The artifact repository can also be used as the publishing platform to store intermediate files needed in the build phase."}),"\n",(0,n.jsx)(t.p,{children:"The artifact repository contains a complete history of packages, and therefore also provides access to older versions.  This feature is especially important in cases where a rollback or audit is required. The artifact repository is meant to be the single point of truth for binaries, much in the same way that a SCM is the single point of truth for source files."}),"\n",(0,n.jsx)(t.p,{children:"It is expected that a package will be deployed to several execution environments, each of them being used for different testing phases. Ultimately, some packages will be deployed to production. In this arrangement, the artifact repository acts like a proxy for the deployment manager, which is responsible for deploying the artifacts produced by the build system to one or more runtime environments."}),"\n",(0,n.jsx)(t.p,{children:'The key mission and benefit of an artifact repository is to decouple source code management (SCM) configurations from runtime environments. This supports the fundamental DevOps principle of "build once, deploy many". Once you build and test a set of binaries to verify it, then that is the same set of binaries that you will want to deploy to the production environment. By ensuring you can use the same set of executables between your deployment environments, from testing to production, you not only reduce the risk of build time issues going undetected into your production environments, but it also becomes much easier to determine if a deployment problem is the result of a build time issue or a runtime environment issue.'}),"\n",(0,n.jsx)(t.h2,{id:"common-artifact-repository-options",children:"Common artifact repository options"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"JFrog Artifactory"}),"\n",(0,n.jsx)(t.li,{children:"Sonatype Nexus"}),"\n",(0,n.jsx)(t.li,{children:"UrbanCode Deploy (UCD) Codestation"}),"\n",(0,n.jsx)(t.li,{children:"Azure Artifacts"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(t.p,{children:["This page contains reformatted excerpts from ",(0,n.jsx)(t.a,{href:"https://www.ibm.com/support/pages/packaging-and-deployment-strategies-open-and-modern-cicd-pipeline-focusing-mainframe-software-development",children:"Packaging and Deployment Strategies in an Open and Modern CI/CD Pipeline focusing on Mainframe Software Development"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,i.M)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},2172:(e,t,o)=>{o.d(t,{I:()=>r,M:()=>s});var n=o(1504);const i={},a=n.createContext(i);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);