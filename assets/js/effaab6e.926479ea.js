"use strict";(self.webpackChunkdap_docs=self.webpackChunkdap_docs||[]).push([[178],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),u=i,h=p["".concat(s,".").concat(u)]||p[u]||m[u]||r;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={},o="Introduction to branching models",l={unversionedId:"branching-models",id:"branching-models",title:"Introduction to branching models",description:"Git branching models are patterns to enable development teams using Git to manage their code in a streamlined manner. Since Git is established as a de facto standard for source code management (SCM) in the developer community, several approaches were designed to fulfill developers' requirements and manage the application source code lifecycle, with advantages and drawbacks depending on use cases. Based on the experience gained designing branching strategies, the pages in this section describe a blueprint implementation of a mainline-based development approach for mainframe applications using feature branches with an early integration pattern. This setup leverages a standardized development toolset based on an enterprise-wide Git provider and a continuous integration/continuous delivery (CI/CD) toolchain.",source:"@site/docs/branching-models.md",sourceDirName:".",slug:"/branching-models",permalink:"/z-devops-acceleration-program/docs/branching-models",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Defining dependency management",permalink:"/z-devops-acceleration-program/docs/dependency-management"},next:{title:"Git branching model for mainframe development",permalink:"/z-devops-acceleration-program/docs/git-branching-model-for-mainframe-dev"}},s={},c=[{value:"Aims and Assumptions",id:"aims-and-assumptions",level:2},{value:"Choosing a workflow and branching model",id:"choosing-a-workflow-and-branching-model",level:2}],d={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction-to-branching-models"},"Introduction to branching models"),(0,i.kt)("p",null,"Git branching models are patterns to enable development teams using Git to manage their code in a streamlined manner. Since Git is established as a de facto standard for source code management (SCM) in the developer community, several approaches were designed to fulfill developers' requirements and manage the application source code lifecycle, with advantages and drawbacks depending on use cases. Based on the experience gained designing branching strategies, the pages in this section describe a blueprint implementation of a mainline-based development approach for mainframe applications using feature branches with an early integration pattern. This setup leverages a standardized development toolset based on an enterprise-wide Git provider and a continuous integration/continuous delivery (CI/CD) toolchain."),(0,i.kt)("p",null,"A characteristic of this integration pattern is that developers are implementing changes for a planned release and integrate their changes into a common permanent branch (the shared configuration) that is built, tested, and released together as one consistent entity."),(0,i.kt)("p",null,"The purpose of streamlining both the DevOps solutions and the delivery workflow is to simplify the process for development teams to deliver quality product releases on time. This enables agile development practices that allow the teams to respond more effectively to changes in the market and customer needs. ",(0,i.kt)("a",{parentName:"p",href:"/z-devops-acceleration-program/docs/git-branching-model-for-mainframe-dev"},"The Git branching model for mainframe development")," introduces the branching model and outlines the development workflow from the developer's perspective. The details of the technical implementation with IBM Dependency Based Build (DBB) and zAppBuild, as well as packaging and deployment, are discussed in ",(0,i.kt)("a",{parentName:"p",href:"/z-devops-acceleration-program/docs/branching-model-supporting-pipeline"},"Pipeline design and implementation supporting the branching model"),". All branching models are adaptable to the needs of specific teams and their applications. Our branching approach advocates for best practices and indicates where variations can be applied."),(0,i.kt)("p",null,"The target audience of this branching model documentation is mainframe DevOps architects and SCM specialists interested in learning how to design and implement a CI/CD pipeline with a robust and state-of-the-art development workflow."),(0,i.kt)("h2",{id:"aims-and-assumptions"},"Aims and Assumptions"),(0,i.kt)("p",null,"Some aims and assumptions that guide our recommendations include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The workflow and branching scheme should both scale up and scale down."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Small teams with simple and infrequent changes will be able to easily understand, adopt, and have a good experience."),(0,i.kt)("li",{parentName:"ul"},"Large, busy teams with many concurrent activities will be able to plan, track, and execute with maximum agility using the same fundamental principles."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Planning and design activities as well as code development aim to align to a regular release cadence.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'There is no magic answer to managing large numbers of "in-flight" changes, so planning assumptions should aim as much as possible to complete changes quickly, ideally within one release cycle.'),(0,i.kt)("admonition",{parentName:"li",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'DevOps/Agile practices typically encourage that, where possible, development teams should strive to break down larger changes into sets of smaller, incremental deliverables that can each be completed within an iteration. This reduces the number of "in-flight" changes, and allows the team to deliver value (end-to-end functionality) more quickly while still building towards a larger development goal.'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We know it is sometimes unavoidable for work to take longer than one release cycle and we accommodate that as a variant of the base workflow."))),(0,i.kt)("h2",{id:"choosing-a-workflow-and-branching-model"},"Choosing a workflow and branching model"),(0,i.kt)("p",null,"Your choice of workflow and the branching model that supports it need to take into account your team's needs and characteristics."),(0,i.kt)("p",null,"Aspects to consider include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Size of the team"),(0,i.kt)("li",{parentName:"ul"},"Frequency of change"),(0,i.kt)("li",{parentName:"ul"},"Granularity of change"),(0,i.kt)("li",{parentName:"ul"},"Amount of parallel development"),(0,i.kt)("li",{parentName:"ul"},"Formality of release process")),(0,i.kt)("p",null,"The workflows of our recommended ",(0,i.kt)("a",{parentName:"p",href:"/z-devops-acceleration-program/docs/git-branching-model-for-mainframe-dev"},"Git branching model for mainframe development")," are flexible enough to scale from small teams with an infrequent pattern of small changes, to large and busier teams with many concurrent projects and projects spanning multiple cycles of a formal release cadence. These workflows are supported by the CI/CD pipeline implementation described in ",(0,i.kt)("a",{parentName:"p",href:"/z-devops-acceleration-program/docs/branching-model-supporting-pipeline"},"Pipeline design and implementation supporting the branching model"),"."))}m.isMDXComponent=!0}}]);