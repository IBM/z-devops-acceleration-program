"use strict";(self.webpackChunkdap_docs=self.webpackChunkdap_docs||[]).push([[1132],{7576:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=i(7624),r=i(2172);const o={},a="DBB Migration Tool",s={id:"dbb-migration-tool",title:"DBB Migration Tool",description:"DBB Migration Tool overview",source:"@site/docs/dbb-migration-tool.md",sourceDirName:".",slug:"/dbb-migration-tool",permalink:"/z-devops-acceleration-program/docs/dbb-migration-tool",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Managing code page conversion",permalink:"/z-devops-acceleration-program/docs/managing-code-page-conversion"},next:{title:"SCLM-to-Git Migration Tool",permalink:"/z-devops-acceleration-program/docs/sclm-git-migration-tool"}},c={},l=[{value:"DBB Migration Tool overview",id:"dbb-migration-tool-overview",level:2},{value:"Example setup",id:"example-setup",level:2},{value:"MIGRATE.TECHDOC.SOURCE",id:"migratetechdocsource",level:3},{value:"MIGRATE.TECHDOC.COPYBOOK",id:"migratetechdoccopybook",level:3},{value:"Migration scenarios",id:"migration-scenarios",level:2},{value:"1. Migration using the default settings",id:"1-migration-using-the-default-settings",level:3},{value:"2. Migration using the pdsEncoding Mapping Rule",id:"2-migration-using-the-pdsencoding-mapping-rule",level:3},{value:"3. Detection of non-roundtripable characters",id:"3-detection-of-non-roundtripable-characters",level:3},{value:"4. Detection of non-printable characters",id:"4-detection-of-non-printable-characters",level:3},{value:"Scan level set to <code>info</code>",id:"scan-level-set-to-info",level:4},{value:"Scan level set to warning",id:"scan-level-set-to-warning",level:4},{value:"Recommendations for using the migration utility",id:"recommendations-for-using-the-migration-utility",level:2},{value:"Migrating from IBM Engineering Workflow Management to GIT",id:"migrating-from-ibm-engineering-workflow-management-to-git",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"dbb-migration-tool",children:"DBB Migration Tool"}),"\n",(0,t.jsx)(n.h2,{id:"dbb-migration-tool-overview",children:"DBB Migration Tool overview"}),"\n",(0,t.jsxs)(n.p,{children:["IBM\xae Dependency Based Build (DBB) provides a migration tool that facilitates the copying of source code PDS members into a pre-existing local Git repository in z/OS UNIX System Services (z/OS UNIX), stored on the z/OS File System (zFS). The populated local Git repository can then be committed and pushed to a distributed Git server. During the copy process, the DBB Migration Tool will perform the necessary code page conversion from the z/OS code page to the traditional code page used in Git when applicable, create (or update) the ",(0,t.jsx)(n.code,{children:".gitattributes"})," file with the correct encoding mappings, tag the z/OS UNIX files with the appropriate code page values, and (potentially) report on any issues encountered during the migration."]}),"\n",(0,t.jsxs)(n.p,{children:["The migration tool is bundled as part of the SMP/e installation of the Dependency Based Build toolkit (FMID HBGZ110) and is typically found under the ",(0,t.jsxs)(n.a,{href:"https://www.ibm.com/docs/en/dbb/2.0?topic=SS6T76_2.0.0/setup_dbb_toolkit.htm",children:[(0,t.jsx)(n.code,{children:"migration/bin"})," sub-directory"]})," of the DBB installation folder (which by default is ",(0,t.jsx)(n.code,{children:"/usr/lpp/IBM/dbb"}),", unless customized during installation). The setup, general usage, and various options provided by this tool to assist in the migration can be found on the ",(0,t.jsx)(n.a,{href:"https://www.ibm.com/docs/en/dbb/2.0?topic=migrating-source-files-from-zos-git",children:"IBM Documentation website"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The following sections of this page will showcase various migration scenarios using the context that has been described in ",(0,t.jsx)(n.a,{href:"/z-devops-acceleration-program/docs/managing-code-page-conversion",children:"Managing code page conversion"}),". The intent is not to provide an exhaustive set of scenarios supported by the migration tool, but rather to focus on common use cases. The scenarios are:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#1-migration-using-the-default-settings",children:"Migration using the default settings"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"#2-migration-using-the-pdsencoding-mapping-rule",children:["Migration using the ",(0,t.jsx)(n.code,{children:"pdsEncoding"})," Mapping Rule"]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#3-detection-of-non-roundtripable-characters",children:"Detection of non-roundtripable characters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4-detection-of-non-printable-characters",children:"Detection of non-printable characters"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-setup",children:"Example setup"}),"\n",(0,t.jsx)(n.p,{children:"To illustrate the scenarios, the following sample PDSs were constructed to highlight some specific migration situations that may be encountered and how to mitigate potential issues:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#migratetechdocsource",children:(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.SOURCE"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#migratetechdoccopybook",children:(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.COPYBOOK"})})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"migratetechdocsource",children:"MIGRATE.TECHDOC.SOURCE"}),"\n",(0,t.jsxs)(n.p,{children:["Content of the ",(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.SOURCE"})," dataset:"]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Member"}),(0,t.jsx)("th",{children:"Description"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"IBM037"}),(0,t.jsxs)("td",{children:[(0,t.jsxs)(n.p,{children:["Member that has been created using the code page of IBM-037.",(0,t.jsx)("br",{}),"Example: IBM-037 Code Page"]}),(0,t.jsx)("pre",{lang:"c",children:(0,t.jsx)(n.p,{children:"void main(int argc, char *argv[])"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{children:"Note:"})," Under the IBM-037 code page, the hexadecimal codes for the ",(0,t.jsx)("code",{children:"["})," and the ",(0,t.jsx)("code",{children:"]"})," characters are x\u2019BA\u2019 and x\u2019BB\u2019, respectively."]})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"IBM1047"}),(0,t.jsxs)("td",{children:[(0,t.jsxs)(n.p,{children:["Member that has been created using the code page of IBM-1047.",(0,t.jsx)("br",{}),"Example: IBM-1047 Code Page"]}),(0,t.jsx)("pre",{lang:"c",children:(0,t.jsx)(n.p,{children:"void main(int argc, char *argv[])"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{children:"Note:"})," Under the IBM-1047 code page, the hexadecimal codes for the ",(0,t.jsx)("code",{children:"["})," and the ",(0,t.jsx)("code",{children:"]"})," characters are x\u2019AD\u2019 and x\u2019BD\u2019, respectively."]})]})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"migratetechdoccopybook",children:"MIGRATE.TECHDOC.COPYBOOK"}),"\n",(0,t.jsxs)(n.p,{children:["Content of the ",(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.COPYBOOK"})," dataset:"]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Member"}),(0,t.jsx)("th",{children:"Description"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"NROUND"}),(0,t.jsxs)("td",{children:[(0,t.jsxs)(n.p,{children:["Member that contains non-roundtripable characters.",(0,t.jsx)("br",{}),"Example: Non-roundtripable characters"]}),(0,t.jsx)("pre",{lang:"cobol",children:(0,t.jsxs)(n.p,{children:["Line with CHAR_NL (0x15)  \u2424",(0,t.jsx)("br",{}),"\nLine with CHAR_CR (0x0D)  \u240d",(0,t.jsx)("br",{}),"\nLine with CHAR_LF (0x25)  \u240a",(0,t.jsx)("br",{}),"\nLine with CHAR_SHIFT_IN (0x0F)  _",(0,t.jsx)("br",{}),"\nLine with CHAR_SHIFT_OUT(0x0E)  _",(0,t.jsx)("br",{}),"\nLine with empty CHAR_SHIFT_OUT(0x0E) and CHAR_SHIFT_IN (0x0F)  __"]})})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"NPRINT"}),(0,t.jsxs)("td",{children:[(0,t.jsxs)(n.p,{children:["Member that contains non-printable characters.",(0,t.jsx)("br",{}),"Example: Non-Printable Characters"]}),(0,t.jsx)("pre",{lang:"cobol",children:(0,t.jsxs)(n.p,{children:["Line with (0x06)  ?",(0,t.jsx)("br",{}),"\nLine with (0x07)  \x7f",(0,t.jsx)("br",{}),"\nLine with (0x1B)  \x8f"]})})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"HEXCODED"}),(0,t.jsxs)("td",{children:[(0,t.jsxs)(n.p,{children:["Member that contains non-printable and non-roundtripable characters.",(0,t.jsx)("br",{}),"Example: Hexadecimal Coded Characters"]}),(0,t.jsx)("pre",{lang:"cobol",children:(0,t.jsxs)(n.p,{children:["01   DFHBMSCA.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPEM  PICTURE X VALUE IS '",(0,t.jsxs)(n.em,{children:["'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPNL  PICTURE X VALUE IS '\u2424'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPFF  PICTURE X VALUE IS '"]}),"'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPCR  PICTURE X VALUE IS '\u240d'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMASK  PICTURE X VALUE IS '0'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMUNP  PICTURE X VALUE IS ' '."]})})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"HEXVALUE"}),(0,t.jsxs)("td",{children:[(0,t.jsxs)(n.p,{children:["Member that contains the suggested transformation of the non-printable or non-roundtripable characters contained in the \u201cHEXCODED\u201d member in a more suitable format.",(0,t.jsx)("br",{}),"Example: Hexadecimal Values"]}),(0,t.jsx)("pre",{lang:"cobol",children:(0,t.jsxs)(n.p,{children:["01   DFHBMSCA.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPEM  PICTURE X VALUE IS X'19'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPNL  PICTURE X VALUE IS X'15'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPFF  PICTURE X VALUE IS X'0C'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMPCR  PICTURE X VALUE IS X'0D'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMASK  PICTURE X VALUE IS '0'.",(0,t.jsx)("br",{}),"\n\xa0\xa002 DFHBMUNP  PICTURE X VALUE IS ' '."]})})]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"migration-scenarios",children:"Migration scenarios"}),"\n",(0,t.jsx)(n.h3,{id:"1-migration-using-the-default-settings",children:"1. Migration using the default settings"}),"\n",(0,t.jsxs)(n.p,{children:["In this scenario, we will be migrating all the source members in the ",(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.SOURCE"})," PDS using the default settings into a local z/OS UNIX Git Repository under ",(0,t.jsx)(n.code,{children:"/u/user1/Migration"}),". This is the most simplistic form of invoking the migration tool and, in most cases, satisfies most needs."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$DBB_HOME/migration/bin/migrate.sh -r /u/user1/Migration -m Mapping Rule[hlq:MIGRATE.TECHDOC,extension:SRC,toLower:true] SOURCE\n\nSetting dbb.file.tagging = true\nLocal GIT repository: /u/user1/Migration\nMapping: MappingRule[hlq:MIGRATE.TECHDOC,extension:SRC,toLower:true]\nMappingRuleId: com.ibm.dbb.migration.MappingRule\nMappingRuleAttrs: [hlq:MIGRATE.TECHDOC, extension:SRC, toLower:true]\nUsing mapping rule com.ibm.dbb.migration.MappingRule to migrate the data sets\nMigrating data set SOURCE\nCopying MIGRATE.TECHDOC.SOURCE(IBM037) to /u/user1/Migration/source/ibm037.src using default encoding\nCopying MIGRATE.TECHDOC.SOURCE(IBM1047) to /u/user1/Migration/source/ibm1047.src using default encoding\n** Build finished\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that the migration tool is using a default encoding, which is IBM-1047."}),"\n",(0,t.jsx)(n.p,{children:"An examination of the files on the local z/OS UNIX Git repository will reveal that the files were copied and were tagged with the default code page of IBM-1047."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ls -alT /u/user1/Migration/source\ntotal 64\n                    drwxr-xr-x   2 USER1    OMVS        8192 May  4 12:33 .\n                    drwxr-xr-x   4 USER1    OMVS        8192 May  4 12:33 ..\nt IBM-1047    T=on  -rw-r--r--   1 USER1    OMVS          61 May  4 12:33 ibm037.src\nt IBM-1047    T=on  -rw-r--r--   1 USER1    OMVS          61 May  4 12:33 ibm1047.src\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, the ",(0,t.jsx)(n.code,{children:".gitattributes"})," file was created (or updated) with the correct encoding mappings. All source artifacts, except those tagged as binary (to be discussed later), will be stowed in the distributed Git server using the UTF-8 code page (as defined by the ",(0,t.jsx)(n.code,{children:"git-encoding=utf-8"})," parameter), whereas any artifacts that are copied from the distributed Git server to z/OS will be translated to the IBM-1047 code page (as defined by the ",(0,t.jsx)(n.code,{children:"zos-working-tree-encoding=ibm-1047"})," parameter). The documentation on ",(0,t.jsx)(n.a,{href:"/z-devops-acceleration-program/docs/managing-code-page-conversion#defining-the-code-page-of-files-in-git",children:"Defining the code page of files in Git"})," provides more information."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cat /u/user1/Migration/.gitattributes\nsource/*.src zos-working-tree-encoding=ibm-1047 git-encoding=utf-8\n"})}),"\n",(0,t.jsx)(n.p,{children:"At this point, Git actions such as add/commit/push can be performed on the migrated source artifacts to the distributed Git server."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git add .\ngit commit -m "Simple Migration Example"\n[main 6436b92] Simple Migration Example\n 3 files changed, 5 insertions(+)\n create mode 100644 .gitattributes\n create mode 100644 source/ibm037.src\n create mode 100644 source/ibm1047.src\ngit push\nCounting objects: 6, done.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 634 bytes | 211.00 KiB/s, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo github.ibm.com:user1/Migration.git\n   3d2962a..6436b92  main -> main\n'})}),"\n",(0,t.jsx)(n.p,{children:"Once the Git push command has completed to the distributed Git server, the resulting files should be translated into the correct UTF-8 code page."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"DBB Migration Tool scenario 1, .gitattributes file",src:i(5948).c+"",width:"400",height:"178"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"DBB Migration Tool scenario 1, ibm1047.src file",src:i(9008).c+"",width:"402",height:"200"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"DBB Migration Tool scenario 1, ibm037.src file",src:i(6556).c+"",width:"402",height:"216"})}),"\n",(0,t.jsxs)(n.p,{children:["However, as indicated in the last picture above, the ",(0,t.jsx)(n.code,{children:"ibm037.src"})," file reveals an encoding issue. This will be discussed in the next scenario."]}),"\n",(0,t.jsx)(n.h3,{id:"2-migration-using-the-pdsencoding-mapping-rule",children:"2. Migration using the pdsEncoding Mapping Rule"}),"\n",(0,t.jsxs)(n.p,{children:["In this scenario, we will be migrating a single source member from the ",(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.SOURCE PDS"})," using the ",(0,t.jsx)(n.code,{children:"pdsEncoding"})," keyword in the mapping rule to override the default encoding. Recall that from the previous migration scenario, there was an encoding issue with the final copy of the ",(0,t.jsx)(n.code,{children:"ibm037.src"})," file in the distributed Git server. This occurred because the z/OS file was written using the IBM-037 code page instead of the default IBM-1047 code page. The problem is not in how the file was encoded, but rather how the Rocket Git client converted the file when sending it to Git."]}),"\n",(0,t.jsx)(n.p,{children:"This can be a common occurrence for source files that pre-date the introduction of z/OS Unix System Services (z/OS UNIX), and where high-level languages, such as C/370, were utilized. As stated previously, determining the original encoding can be a challenge since the code page used to create the file is generally specified in the 3270 Emulator (TN3270) client session set-up. Therefore, an analysis of the z/OS source should be performed to determine the original code page used to create the source. To determine the code page used to create files through ISPF, an alternate option is to ask the developers which code page they are using to edit the files through their 3270 connections."}),"\n",(0,t.jsxs)(n.p,{children:["To correct the encoding issue identified in the previous scenario, we will use the ",(0,t.jsx)(n.code,{children:"pdsEncoding"})," keyword of the mapping rule to override the default IBM-1047 code page with IBM-037 for the offending member."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'$DBB_HOME/migration/bin/migrate.sh -r /u/user1/Migration -m MappingRule[hlq:MIGRATE.TECHDOC,extension:SRC,toLower:true,pdsEncoding:IBM-037] "SOURCE(IBM037)"\n\nSetting dbb.file.tagging = true\nLocal GIT repository: /u/user1/Migration\nMapping: MappingRule[hlq:MIGRATE.TECHDOC,extension:SRC,toLower:true,pdsEncoding:IBM-037]\nMappingRuleId: com.ibm.dbb.migration.MappingRule\nMappingRuleAttrs: [hlq:MIGRATE.TECHDOC, extension:SRC, toLower:true, pdsEncoding:IBM-037]\nUsing mapping rule com.ibm.dbb.migration.MappingRule to migrate the data sets\nMigrating data set SOURCE(IBM037)\nCopying MIGRATE.TECHDOC.SOURCE(IBM037) to /u/user1/Migration/source/ibm037.src using IBM-037\n** Build finished\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note that the migration tool is using the override encoding of IBM-037 for a named member. This override does not necessarily have to be performed on a member-by-member basis, as the migration tool supports the ability to override the encoding for an entire PDS being migrated."}),"\n",(0,t.jsx)(n.p,{children:"An examination of the files on the local z/OS UNIX Git repository will reveal that the file was copied and tagged with the override code page of IBM-037."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ls -alT /u/user1/Migration/source\ntotal 64\n                    drwxr-xr-x   2 USER1    OMVS        8192 May  4 13:10 .\n                    drwxr-xr-x   4 USER1    OMVS        8192 May  4 13:10 ..\nt IBM-037     T=on  -rw-r--r--   1 USER1    OMVS          61 May  4 14:54 ibm037.src\nt IBM-1047    T=on  -rw-r--r--   1 USER1    OMVS          61 May  4 13:10 ibm1047.src\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, the ",(0,t.jsx)(n.code,{children:".gitattributes"})," file was updated with the correct encoding mappings:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cat /u/user1/Migration/.gitattributes\nsource/*.src zos-working-tree-encoding=ibm-1047 git-encoding=utf-8\nsource/*.src zos-working-tree-encoding=IBM-037 git-encoding=utf-8\n"})}),"\n",(0,t.jsxs)(n.p,{children:["However, in this example you will notice a slight anomaly in that there are two (2) entries for the same sub-folder source/*.src. This will cause an encoding conflict during the Git add action. To correct this situation, the ",(0,t.jsx)(n.code,{children:".gitattributes"})," file must be manually updated to add the file name. Wild cards can be used in the file name should there be more than one member that matches this situation. The order of these entries is important, with the last entry taking precedence. In some cases, additional wild carding may be required to prevent further conflicts."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cat /u/user1/Migration/.gitattributes\nsource/*.src zos-working-tree-encoding=ibm-1047 git-encoding=utf-8\nsource/ibm037.src zos-working-tree-encoding=IBM-037 git-encoding=utf-8\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once the correction has been made to the ",(0,t.jsx)(n.code,{children:".gitattributes"})," file, the Git commit and push actions can be performed on the updated files to the distributed Git server:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git add .\ngit commit -m "IBM037 Code Page Fix"\n[main 107c86c] IBM037 Code Page Fix\n 2 files changed, 2 insertions(+), 1 deletion(-)\ngit push\nCounting objects: 5, done.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (5/5), 485 bytes | 485.00 KiB/s, done.\nTotal 5 (delta 2), reused 0 (delta 0)\nTo github.ibm.com:user1/Migration.git\n   6436b92..107c86c  main -> main   3d2962a..6436b92  main -> main\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now when examining the offending file on the distributed Git server, the contents of the file should be translated correctly:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"DBB Migration Tool scenario 2, ibm037.src file",src:i(3440).c+"",width:"370",height:"214"})}),"\n",(0,t.jsxs)(n.p,{children:["The probability that members of a single PDS were written using a different code page, though possible, is extremely low. However, it is worth pointing out that it could expose an issue in how the migration tool generates the ",(0,t.jsx)(n.code,{children:".gitattributes"})," file."]}),"\n",(0,t.jsx)(n.h3,{id:"3-detection-of-non-roundtripable-characters",children:"3. Detection of non-roundtripable characters"}),"\n",(0,t.jsxs)(n.p,{children:["In this scenario, we will examine how the migration tool can assist in the detection of what is known as non-roundtripable characters. The documentation on ",(0,t.jsx)(n.a,{href:"/z-devops-acceleration-program/docs/managing-code-page-conversion#managing-non-printable-and-non-roundtripable-characters",children:"Managing non-printable and non-roundtripable characters"})," provides more conceptual background information. To illustrate this, we will be migrating the single source member ",(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.COPYBOOK(NROUND)"}),", which contains both types of characters."]}),"\n",(0,t.jsxs)(n.p,{children:["During the migration of a PDS member to a z/OS UNIX file, the migration tool will scan the content of the file to see if it detects any non-roundtripable characters. These characters are defined in the ",(0,t.jsx)(n.code,{children:"migrate.groovy"})," script and are:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-groovy",children:"@Field def CHAR_NL = 0x15\n@Field def CHAR_CR = 0x0D\n@Field def CHAR_LF = 0x25\n@Field def CHAR_SHIFT_IN = 0x0F\n@Field def CHAR_SHIFT_OUT = 0x0E\n"})}),"\n",(0,t.jsx)(n.p,{children:"If detected, the migration tool will emit a diagnostic message in the console log and will copy the member to z/OS UNIX as binary and therefore no code page conversion will be performed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'$DBB_HOME/migration/bin/migrate.sh -r /u/user1/Migration -m MappingRule[hlq:MIGRATE.TECHDOC,extension:CPY,toLower:true,pdsEncoding:IBM-037] "COPYBOOK(NROUND)"\n\nLocal GIT repository: /u/user1/Migration\nUsing mapping rule com.ibm.dbb.migration.MappingRule to migrate the data sets\nMigrating data set COPYBOOK(NROUND)\n[WARNING] Copying MIGRATE.TECHDOC.COPYBOOK(NROUND) to /u/user1/Migration/copybook/nround.cpy\n ! Possible migration issue:\n      Line 2 contains non-roundtripable characters:\n        Char 0x15 at column 27\n      Line 3 contains non-roundtripable characters:\n        Char 0x0D at column 27\n      Line 4 contains non-roundtripable characters:\n        Char 0x25 at column 27\n      Line 7 contains non-roundtripable characters:\n        Empty Shift Out and Shift In at column 74\n\n ! Copying using BINARY mode\n** Build finished\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note that the migration tool has detected numerous non-roundtripable characters on various lines and has performed the copy as binary."}),"\n",(0,t.jsx)(n.p,{children:"An examination of the files on the local z/OS UNIX Git Repository will reveal that the file was copied but left untagged (this is a current known limitation for the DBB Toolkit in its 1.1.3 version, and a workaround is available upon request)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ls -alT /u/user1/Migration/copybook\ntotal 48\n                    drwxr-xr-x   2 USER1    OMVS        8192 May  6 13:42 .\n                    drwxr-xr-x   4 USER1    OMVS        8192 May  6 13:42 ..\n- untagged    T=off -rw-r--r--   1 USER1    OMVS         560 May  6 13:42 nround.cpy\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To be processed by the Rocket Git client when performing the Git add command, the file should be manually tagged as binary first. To correctly tag the file as binary, use the ",(0,t.jsx)(n.code,{children:"chtag -b"})," command prior to performing the Git add command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ls -alT /u/user1/Migration/copybook\ntotal 48\n                    drwxr-xr-x   2 USER1    OMVS        8192 May  8 13:10 .\n                    drwxr-xr-x   5 USER1    OMVS        8192 May  8 13:12 ..\nb binary      T=off -rw-r--r--   1 USER1    OMVS         560 May  8 13:10 nround.cpy\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, the ",(0,t.jsx)(n.code,{children:".gitattributes"})," file was automatically updated by the migration script to indicate that the file is mapped as binary:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cat /u/user1/Migration/.gitattributes\ncopybook/nround.cpy binary\n"})}),"\n",(0,t.jsx)(n.p,{children:"During the Git push to the distributed Git server, Git will treat this as a binary file and no conversion to UTF-8 will take place. In essence, the resulting file on the distributed Git server will be the original contents of the PDS member, in EBCDIC."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git add .\nwarning: copybook/nround.cpy added file have been automatically tagged BINARY because they were untagged yet the .gitattributes file specifies they should be tagged\ngit commit -m "Binary File"\n[main 0213795] Binary File\n 2 files changed, 1 insertion(+)\n create mode 100644 .gitattributes\n create mode 100644 copybook/nround.cpy\ngit push\nCounting objects: 5, done.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (5/5), 598 bytes | 598.00 KiB/s, done.\nTotal 5 (delta 0), reused 0 (delta 0)\nTo github.ibm.com:user1/Migration.git\n   e901992..0213795  main -> main\n'})}),"\n",(0,t.jsx)(n.p,{children:"Once the Git push action has completed to the distributed Git server, the resulting file will be treated as binary:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"DBB Migration Tool scenario 3, binary nround.cpy file in Git",src:i(5364).c+"",width:"462",height:"182"})}),"\n",(0,t.jsxs)(n.p,{children:["This may not be an ideal situation as described in the documentation on ",(0,t.jsx)(n.a,{href:"/z-devops-acceleration-program/docs/managing-code-page-conversion#managing-non-printable-and-non-roundtripable-characters",children:"Managing non-printable and non-roundtripable characters"}),", and should be corrected/reconciled before continuing with the migration."]}),"\n",(0,t.jsx)(n.h3,{id:"4-detection-of-non-printable-characters",children:"4. Detection of non-printable characters"}),"\n",(0,t.jsxs)(n.p,{children:["In this final scenario, we will examine how the migration tool can assist in the detection of what is known as non-printable characters. The documentation on ",(0,t.jsx)(n.a,{href:"/z-devops-acceleration-program/docs/managing-code-page-conversion#managing-non-printable-and-non-roundtripable-characters",children:"Managing non-printable and non-roundtripable characters"})," provides more conceptual background information. To illustrate this, we will again migrate the single source member ",(0,t.jsx)(n.code,{children:"MIGRATE.TECHDOC.COPYBOOK(NPRINT)"}),", which only contains non-printable characters."]}),"\n",(0,t.jsx)(n.p,{children:"During the migration of a PDS member to a z/OS UNIX file, the migration tool will scan the content of the file to see if it detects any non-printable characters. These characters are defined as any hexadecimal values that are an EBCDIC x\u201940\u2019 or less, and not one of the five (5) non-roundtripable characters."}),"\n",(0,t.jsx)(n.p,{children:"The migration tool provides three (3) options on how to handle and report on these characters:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Do Not Check: The non-printable characters are not researched; the member is simply copied as text. Code page conversion will occur."}),"\n",(0,t.jsx)(n.li,{children:"Info: The script will emit an Informational diagnostic message in the console log if a non-printable  character is detected and the file is copied as text. Code page conversion will occur."}),"\n",(0,t.jsx)(n.li,{children:"Warning: The script will emit a Warning diagnostic message in the console log if a non-printable character is detected and the file is copied as binary. No code page conversion will occur, and the offending characters will be treated like non-roundtripable characters."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"It should be noted that for the \u201cDo Not Check\u201d and \u201cInfo\u201d options, although code page conversion is taking place, this could cause an issue later. The file may not be easily maintained with a distributed editor, and you run the risk of having corrupted files."}),"\n",(0,t.jsxs)(n.p,{children:["Controlling what level of checking should be performed during the migration is done via the optional scan level ",(0,t.jsx)(n.code,{children:"-np"}),", ",(0,t.jsx)(n.code,{children:"--non-printable <level>"})," parameter switch passed to the migration script. If the scan level parameter is not specified, the non-printable characters are not checked (equates to the \u201cDo Not Check\u201d option)."]}),"\n",(0,t.jsxs)(n.h4,{id:"scan-level-set-to-info",children:["Scan level set to ",(0,t.jsx)(n.code,{children:"info"})]}),"\n",(0,t.jsxs)(n.p,{children:["Example output for migration performed with scan level set to ",(0,t.jsx)(n.code,{children:"info"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'$DBB_HOME/migration/bin/migrate.sh -r /u/user1/Migration -np info -m MappingRule[hlq:MIGRATE.TECHDOC,extension:CPY,toLower:true,pdsEncoding:IBM-037] "COPYBOOK(NPRINT)"\n\nNon-printable scan level is info\nLocal GIT repository: /u/user1/Migration\nUsing mapping rule com.ibm.dbb.migration.MappingRule to migrate the data sets\nMigrating data set COPYBOOK(NPRINT)\n[INFO] Copying MIGRATE.TECHDOC.COPYBOOK(NPRINT) to /u/user1/Migration/copybook/nprint.cpy using IBM-037\n ! Possible migration issue:\n      Line 2 contains non-printable characters:\n        Char 0x00 at column 19\n      Line 3 contains non-printable characters:\n        Char 0x06 at column 19\n      Line 4 contains non-printable characters:\n        Char 0x07 at column 19\n      Line 5 contains non-printable characters:\n        Char 0x1B at column 19\n\n** Build finished\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note that the migration tool has detected numerous non-printable characters on various lines and has performed the copy as text and will be tagged on z/OS UNIX using the supplied encoding of IBM-037:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ls -alT /u/user1/Migration/copybook\ntotal 64\n                    drwxr-xr-x   2 USER1    OMVS        8192 May  6 15:39 .\n                    drwxr-xr-x   4 USER1    OMVS        8192 May  6 14:55 ..\nt IBM-037     T=on  -rw-r--r--   1 USER1    OMVS         114 May  6 15:39 nprint.cpy\n"})}),"\n",(0,t.jsx)(n.h4,{id:"scan-level-set-to-warning",children:"Scan level set to warning"}),"\n",(0,t.jsxs)(n.p,{children:["Example output for migration performed with scan level set to ",(0,t.jsx)(n.code,{children:"warning"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'$DBB_HOME/migration/bin/migrate.sh -r /u/user1/Migration -np warning -m MappingRule[hlq:MIGRATE.TECHDOC,extension:CPY,toLower:true,pdsEncoding:IBM-037] "COPYBOOK(NPRINT)"\n\nNon-printable scan level is warning\nLocal GIT repository: /u/user1/Migration\nUsing mapping rule com.ibm.dbb.migration.MappingRule to migrate the data sets\nMigrating data set COPYBOOK(NPRINT)\n[WARNING] Copying MIGRATE.TECHDOC.COPYBOOK(NPRINT) to /u/user1/Migration/copybook/nprint.cpy\n ! Possible migration issue:\n      Line 2 contains non-printable characters:\n        Char 0x06 at column 19\n      Line 3 contains non-printable characters:\n        Char 0x07 at column 19\n      Line 4 contains non-printable characters:\n        Char 0x1B at column 19\n\n ! Copying using BINARY mode\n** Build finished\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note that the migration tool has detected numerous non-printable characters on various lines and has performed the copy as binary. The file remains untagged on z/OS UNIX (the manual tagging of the file is still required):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ls -alT /u/user1/Migration/copybook\ntotal 48\n                    drwxr-xr-x   2 USER1    OMVS        8192 May  6 17:17 .\n                    drwxr-xr-x   4 USER1    OMVS        8192 May  6 17:17 ..\n- untagged    T=off -rw-r--r--   1 USER1    OMVS         320 May  6 17:17 nprint.cpy\n"})}),"\n",(0,t.jsx)(n.h2,{id:"recommendations-for-using-the-migration-utility",children:"Recommendations for using the migration utility"}),"\n",(0,t.jsxs)(n.p,{children:["A strategy must be decided on how to handle both non-printable and non-roundtripable characters found in source members that are to be migrated from z/OS PDSs to Git. The ",(0,t.jsx)(n.code,{children:"HEXCODED"})," member, though not demonstrated in the above scenarios, is a common occurrence in many older legacy applications. Source code members such as this need to be identified and transformed to that shown in the ",(0,t.jsx)(n.code,{children:"HEXVALUE"})," member if the goal is to manage the source seamlessly using the modernized tooling provided through Git. For more conceptual background information, please refer to ",(0,t.jsx)(n.a,{href:"/z-devops-acceleration-program/docs/managing-code-page-conversion#managing-non-printable-and-non-roundtripable-characters",children:"Managing non-printable and non-roundtripable characters"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The DBB Migration Tool provides an option to perform a scan of the z/OS PDSs to assist in the analysis and correction/reconciliation of these situations prior to performing the copy to the local Git repository. Invoking this scan is done via the optional preview ",(0,t.jsx)(n.code,{children:"-p"}),", ",(0,t.jsx)(n.code,{children:"--preview"})," parameter switch and will bypass the copy.  The default is \u201cNo Preview\u201d. An example of the preview follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$DBB_HOME/migration/bin/migrate.sh -r /u/user1/Migration -np warning -p -m MappingRule[hlq:MIGRATE.TECHDOC,extension:CPY,toLower:true,pdsEncoding:IBM-037] COPYBOOK\n\nNon-printable scan level is warning\nPreview flag is specified, no members will be copied to HFS\nLocal GIT repository: /u/user1/Migration\nUsing mapping rule com.ibm.dbb.migration.MappingRule to migrate the data sets\nMigrating data set COPYBOOK\n[WARNING] Previewing MIGRATE.TECHDOC.COPYBOOK(HEXCODED)\n ! Possible migration issue:\n      Line 3 contains non-printable characters:\n        Char 0x19 at column 37\n      Line 4 contains non-roundtripable characters:\n        Char 0x15 at column 37\n      Line 5 contains non-printable characters:\n        Char 0x0C at column 37\n      Line 6 contains non-roundtripable characters:\n        Char 0x0D at column 37\n\n ! Will copy using BINARY mode\nPreviewing MIGRATE.TECHDOC.COPYBOOK(HEXVALUE). Using IBM-037.\n[WARNING] Previewing MIGRATE.TECHDOC.COPYBOOK(NPRINT)\n ! Possible migration issue:\n      Line 2 contains non-printable characters:\n        Char 0x06 at column 19\n      Line 3 contains non-printable characters:\n        Char 0x07 at column 19\n      Line 4 contains non-printable characters:\n        Char 0x1B at column 19\n\n ! Will copy using BINARY mode\n[WARNING] Previewing MIGRATE.TECHDOC.COPYBOOK(NROUND)\n ! Possible migration issue:\n      Line 2 contains non-roundtripable characters:\n        Char 0x15 at column 27\n      Line 3 contains non-roundtripable characters:\n        Char 0x0D at column 27\n      Line 4 contains non-roundtripable characters:\n        Char 0x25 at column 27\n      Line 5 contains non-printable characters:\n        Char 0x0F at column 33\n      Line 7 contains non-roundtripable characters:\n        Empty Shift Out and Shift In at column 74\n\n ! Will copy using BINARY mode\n"})}),"\n",(0,t.jsxs)(n.p,{children:["With the ",(0,t.jsx)(n.code,{children:"-l"}),", ",(0,t.jsx)(n.code,{children:"--log"})," option, a log file can be created to contain all the messages about the migration process, including the non-printable and non-roundtripable characters encountered during the scan. This log file can be used by the developers to perform the necessary changes in their original source code members prior to the real migration process."]}),"\n",(0,t.jsxs)(n.p,{children:["Many other options of the Mapping Rule parameter can be leveraged to control the behavior of the DBB Migration Tool. These options are described on the ",(0,t.jsx)(n.a,{href:"https://www.ibm.com/docs/en/dbb/2.0?topic=migrating-source-files-from-zos-git",children:"IBM Documentation website"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"migrating-from-ibm-engineering-workflow-management-to-git",children:"Migrating from IBM Engineering Workflow Management to GIT"}),"\n",(0,t.jsxs)(n.p,{children:["For specific information on using the DBB Migration Tool to migrate from IBM Engineering Workflow Management (EWM) to Git, please reference ",(0,t.jsx)(n.a,{href:"https://www.ibm.com/support/pages/node/6538618",children:"Migrating from IBM Engineering Workflow Management (EWM) to GIT"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This page contains reformatted excerpts from ",(0,t.jsx)(n.a,{href:"https://www.ibm.com/support/pages/node/6591177",children:"Managing the code page conversion when migrating z/OS source files to Git"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5948:(e,n,i)=>{i.d(n,{c:()=>t});const t=i.p+"assets/images/migration-git-scen1-gitattributes-edb30fc0aef94e8e01c917d968220f76.png"},6556:(e,n,i)=>{i.d(n,{c:()=>t});const t=i.p+"assets/images/migration-git-scen1-ibm037-4909f893168bf2e50d1879bd524306c7.png"},9008:(e,n,i)=>{i.d(n,{c:()=>t});const t=i.p+"assets/images/migration-git-scen1-ibm1047-8b1eddf49bde479bd6e2b0c62aa59e31.png"},3440:(e,n,i)=>{i.d(n,{c:()=>t});const t=i.p+"assets/images/migration-git-scen2-ibm037-725b773e7f10948bc57616e64fc0fe4f.png"},5364:(e,n,i)=>{i.d(n,{c:()=>t});const t=i.p+"assets/images/migration-git-scen3-bin-d652e9559d0942ba159859bc50bd0847.png"},2172:(e,n,i)=>{i.d(n,{I:()=>s,M:()=>a});var t=i(1504);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);