"use strict";(self.webpackChunkdap_docs=self.webpackChunkdap_docs||[]).push([[824],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>u});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)a=i[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)a=i[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},h=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,u=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return a?o.createElement(u,r(r({ref:t},h),{},{components:a})):o.createElement(u,r({ref:t},h))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,r[1]=s;for(var c=2;c<i;c++)r[c]=a[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7435:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=a(7462),n=(a(7294),a(3905));const i={},r="Source code management",s={unversionedId:"scm",id:"scm",title:"Source code management",description:"A source code management (SCM) tool manages and stores different versions of your application configuration such as source code files, application-specific configuration data, test cases, and more. It provides capabilities to isolate different development activities and enables parallel development.",source:"@site/docs/scm.md",sourceDirName:".",slug:"/scm",permalink:"/zDevOps-Acceleration/z-devops-acceleration-program/docs/scm",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Integrated development environment",permalink:"/zDevOps-Acceleration/z-devops-acceleration-program/docs/ide"},next:{title:"Build",permalink:"/zDevOps-Acceleration/z-devops-acceleration-program/docs/build"}},l={},c=[{value:"Why move to Git?",id:"why-move-to-git",level:2},{value:"Git in the software development lifecycle",id:"git-in-the-software-development-lifecycle",level:2},{value:"Git basics",id:"git-basics",level:2},{value:"Git branching",id:"git-branching",level:3},{value:"Git merge",id:"git-merge",level:3},{value:"Merge conflict detection: parallel development use case",id:"merge-conflict-detection-parallel-development-use-case",level:4},{value:"Git tags",id:"git-tags",level:3},{value:"Best practices",id:"best-practices",level:2},{value:"Sharing code",id:"sharing-code",level:3},{value:"Common Git provider options",id:"common-git-provider-options",level:2},{value:"Resources",id:"resources",level:2}],h={toc:c},p="wrapper";function d(e){let{components:t,...i}=e;return(0,n.kt)(p,(0,o.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"source-code-management"},"Source code management"),(0,n.kt)("p",null,"A source code management (SCM) tool manages and stores different versions of your application configuration such as source code files, application-specific configuration data, test cases, and more. It provides capabilities to isolate different development activities and enables parallel development."),(0,n.kt)("p",null,"Git is the SCM for the IBM Z DevOps solution."),(0,n.kt)("h2",{id:"why-move-to-git"},"Why move to Git?"),(0,n.kt)("p",null,"Git is the de facto industry standard SCM for the open source community and is growing in popularity among major organizations. It is a central part of the modern developer\u2019s toolkit, and provides a common SCM tool for hybrid application architectures that can span across components ranging from those implemented in traditional mainframe languages such as COBOL, PL/I, or Assembler, to components for the service layer such as z/OS Connect, and components in Java and Go, to reflect the architecture of the business application."),(0,n.kt)("p",null,"Git integrates with most modern DevOps tools and pipeline processes to support the full development lifecycle from continuous integration (CI) to continuous delivery (CD). By migrating to Git as the enterprise SCM, mainframe application development teams can then take advantage of the open source community's modern tooling."),(0,n.kt)("h2",{id:"git-in-the-software-development-lifecycle"},"Git in the software development lifecycle"),(0,n.kt)("p",null,"The following diagram draws analogies between legacy mainframe SCM processes and DevOps with Git on z/OS."),(0,n.kt)("p",null,"It shows the key features of an SCM process, starting with source code storage, and ending with the deployment to the development or other upper environments such as Q/A and Production."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Analogies between legacy mainframe SCM and DevOps with Git on z/OS",src:a(8826).Z,width:"466",height:"198"})),(0,n.kt)("h2",{id:"git-basics"},"Git basics"),(0,n.kt)("p",null,'Git is a distributed "version control system" for source code. It provides many features to allow developers to check in and check out code with a full history and audit trail for all changes.  '),(0,n.kt)("p",null,'Source is stored in repositories (also known as "repos") on distributed file systems. An application repo can be copied (or "cloned") between the central Git server and any machine that has Git, including a developer\'s local computer using popular integrated development environments (IDEs) such as IBM Developer for z/OS (IDz) and Microsoft\u2019s Visual Studio Code (VS Code). This "clone" contains all the files and folders in the repository, as well as their complete version histories.'),(0,n.kt)("p",null,'The developer can then create working copies of the repository code, which Git calls "branches". For each task the developer has (such as a bug fix or feature), the developer would generally do their development work on a personal branch dedicated to that task. When they are ready to promote their changes, they can create what Git calls a "pull request" (also known as a "merge request" by some Git providers), which is a request to integrate (or "merge") those changes back into the team\'s common, shared branch of code.'),(0,n.kt)("p",null,"With Git\u2019s branching and merging features, changes can be performed in isolation and in parallel with other developer changes. Git is typically hosted by service providers such as GitHub, GitLab, Bitbucket, or Azure Repos. Git providers add valuable features on top of the base Git functionality, such as repository hosting, data storage, and security."),(0,n.kt)("p",null,"In Git, all changes are committed (saved) in a repo using a commit hash (unique identifier) and a descriptive comment. Most IDEs provide a Git history tool to navigate changes and drill down to line-by-line details in Git diff reports. The following image of an Azure Repos example setup shows the Git history on the right panel, and a Git diff report on the left."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Git history and Git diff in Azure Repos",src:a(5969).Z,width:"463",height:"125"})),(0,n.kt)("h3",{id:"git-branching"},"Git branching"),(0,n.kt)("p",null,'A Git "branch" is a reference to all the files in a repo at a certain point in time, as well as their history. A normal practice is to create multiple branches in a repo, each for a different purpose. Typically, there will be a "main" branch, which is shared by the development team. The team\'s repository administrator(s) will usually set up protections for this branch, requiring approval for any change to be merged into it. The team might also have additional shared branches for different purposes, depending on their branching strategy. The repository administrator(s) can also set up branch protections for these branches, as well as any other branch in the repository.'),(0,n.kt)("p",null,'All Git actions are performed on a branch, and a key advantage of Git is that it allows developers to clone a repo and create (check out) a new branch (sometimes called a "feature branch") to work on their own changes in isolation from the main source branch. This lets each developer focus on their task without having to worry about other developers\' activities disturbing their work or vice versa.'),(0,n.kt)("p",null,'When a developer wants to save their code changes onto a branch in Git, they perform a Git "commit", which creates a snapshot of the branch with their changes. Git uniquely identifies this snapshot with a commit hash, and attaches a short commit message from the developer describing the changes. The developer (and any other teammates with access to the branch) can then use this commit hash as a point-in-time reference for the set of committed changes. They can later check out the commit hash to view the code at that commit point. Additionally, the code can also be rolled back (or "reverted", in Git terminology) to any prior commit hash.'),(0,n.kt)("h3",{id:"git-merge"},"Git merge"),(0,n.kt)("p",null,"Feature branching allows developers to check out the same code, and work in parallel and in isolation. Git merge is how all the code changes from one branch get integrated into another branch. Once developers complete their feature development, they initiate a pull request asking to integrate their feature changes into the team's shared branch of code."),(0,n.kt)("p",null,"The pull request process is where development teams can implement peer reviews, allowing team leads or other developers to approve or reject changes. They can also set up other quality gates such as automated testing and code scanning to run on the PR. Git will automatically perform ",(0,n.kt)("a",{parentName:"p",href:"#merge-conflict-detection-parallel-development-use-case"},"merge conflict detection")," to prevent the accidental overlaying of changes when the pull request is merged in. Development teams often have a CI pipeline that is triggered to run upon pull request approval/merge for the integration test phase."),(0,n.kt)("h4",{id:"merge-conflict-detection-parallel-development-use-case"},"Merge conflict detection: parallel development use case"),(0,n.kt)("p",null,"One of the biggest benefits of using Git is its merge conflict detection. This is Git's ability to detect when there are overlaps in the code changes during a merge process, so that developers can stop the merge and resolve the merge conflict. This merge conflict detection means that team members can merge their changes to the same program while avoiding unintentionally overlaying each other\u2019s code."),(0,n.kt)("p",null,"To illustrate this example of parallel development, in the following diagram, Developer 1 (Dev1) and Developer 2 (Dev2) have each created their own feature branch from the same version of their team's shared branch of code. Note that there are no commits (indicated by purple dots) on the team's shared branch between when Dev2 and Dev1 created their respective feature branches. Now, each developer can work on their own feature in isolation: Dev1 has his ",(0,n.kt)("inlineCode",{parentName:"p"},"feature1")," branch where he is working on his copy of hte code, and Dev2 has her ",(0,n.kt)("inlineCode",{parentName:"p"},"feature2")," branch where she is working on her copy of the code."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Diagram illustrating parallel development use case",src:a(835).Z,width:"926",height:"676"})),(0,n.kt)("p",null,"Doing this kind of parallel development is complicated on legacy systems, especially with PDSs, because developers have to figure out how to merge the code at the end, especially when working on the same files. Additionally, legacy SCMs typically lock files that are being worked on. In contrast, Git branching allows the developers to work on the files at the same time, in parallel."),(0,n.kt)("p",null,"In the Git example illustrated above, Dev1 and Dev2 agreed to work on different parts of the same program, and they then each make their own pull request to integrate their respective chanages back into the team's shared branch of code when they are ready. Dev1 has done this before Dev2, so his changes have been approved and merged in first. When Dev2 later makes her request to merge her code changes into the team's shared branch of code, Git does a line-by-line check to make sure the changes proposed in Dev2's pull request do not conflict with any of the changes in the shared branch of code (which now include Dev1's changes). If any issues are found, Git will stop the merge and alert the developers of the merge conflict. Git will also highlight the conflicting code so that the developers know where to look and can resolve the conflict, most likely via another commit in Dev2's branch."),(0,n.kt)("h3",{id:"git-tags"},"Git tags"),(0,n.kt)("p",null,"A Git tag is similar to a Git branch, as it references the repo by a specific commit point. However, unlike a branch, a tag can reference only one commit point. Tags are used to label and track releases. They are optional but recommended."),(0,n.kt)("h2",{id:"best-practices"},"Best practices"),(0,n.kt)("h3",{id:"sharing-code"},"Sharing code"),(0,n.kt)("p",null,"It is a common practice that mainframe applications share common code. For example, COBOL copybooks are typically shared across applications that process similar data."),(0,n.kt)("p",null,"The following diagram illustrates how teams can define repos to securely share common code. In this example, App Team 1 has common code that App Team 2 can clone and use in their build."),(0,n.kt)("p",null,"Another example (also illustrated in the following diagram) is that an enterprise-wide team can maintain source that is common across many applications."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Best practices for sharing code in Git",src:a(3506).Z,width:"1610",height:"732"})),(0,n.kt)("h2",{id:"common-git-provider-options"},"Common Git provider options"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"GitLab"),(0,n.kt)("li",{parentName:"ul"},"GitHub"),(0,n.kt)("li",{parentName:"ul"},"Bitbucket"),(0,n.kt)("li",{parentName:"ul"},"Azure Repos")),(0,n.kt)("h2",{id:"resources"},"Resources"),(0,n.kt)("p",null,"This page contains reformatted excerpts from ",(0,n.kt)("a",{parentName:"p",href:"https://www.ibm.com/support/pages/node/7003251"},"Git training for Mainframers"),"."))}d.isMDXComponent=!0},5969:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/azure-history-diff-9abfd43b1679037077f4dc41f99fa442.png"},3506:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/git-sharing-code-350936a37853ba76672651abc7361efe.png"},8826:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/legacy-vs-git-750a5731a06abcb77e56c7c56181c10e.png"},835:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/parallel-dev-28dab5e561ef44182599ba818ea94896.png"}}]);